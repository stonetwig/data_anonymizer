#!/usr/bin/env python3
"""
CSV Anonymizer Script

This script reads the out.csv file generated by combine_csv.py and anonymizes all data values 
using SHA256 hashing. The column headers are preserved, but all data values are replaced with 
their SHA256 hash equivalents.

Hashing algorithm: hashlib.sha256(value.strip().lower().encode()).hexdigest()

Configuration:
    INPUT_FILE: The CSV file to anonymize (default: out.csv)
    OUTPUT_FILE: The anonymized output file (default: out_anonymized.csv)
"""

# CONFIGURATION
INPUT_FILE = "out.csv"
OUTPUT_FILE = "out_anonymized.csv"

import csv
import hashlib
import os
import sys


def anonymize_value(value: str) -> str:
    """
    Anonymize a single value using SHA256 hashing.
    
    Args:
        value: The original value to anonymize
        
    Returns:
        SHA256 hash of the processed value
    """
    if not value or value.strip() == "":
        return ""  # Keep empty values as empty
    
    # Apply the specified hashing algorithm
    processed_value = value.strip().lower()
    hash_object = hashlib.sha256(processed_value.encode())
    return hash_object.hexdigest()


def anonymize_csv():
    """
    Read the input CSV file and create an anonymized version.
    All data values are replaced with SHA256 hashes while preserving the structure.
    """
    
    # Check if input file exists
    if not os.path.exists(INPUT_FILE):
        print(f"Error: Input file '{INPUT_FILE}' does not exist.")
        print("Make sure to run combine_csv.py first to generate out.csv")
        sys.exit(1)
    
    # Delete existing output file if it exists
    if os.path.exists(OUTPUT_FILE):
        os.remove(OUTPUT_FILE)
        print(f"Deleted existing {OUTPUT_FILE}")
    
    print(f"Reading from: {INPUT_FILE}")
    print(f"Writing to: {OUTPUT_FILE}")
    print("=" * 50)
    
    anonymized_rows = []
    original_headers = []
    total_values_processed = 0
    
    try:
        # Read the input CSV
        with open(INPUT_FILE, 'r', encoding='utf-8', newline='') as infile:
            reader = csv.DictReader(infile)
            original_headers = reader.fieldnames
            
            if not original_headers:
                print("Error: No headers found in the input file.")
                sys.exit(1)
            
            print(f"Found {len(original_headers)} columns:")
            for header in original_headers:
                print(f"  - {header}")
            
            print(f"\nAnonymizing data...")
            
            # Process each row
            for row_num, row in enumerate(reader, 1):
                anonymized_row = {}
                
                # Anonymize each value in the row
                for header in original_headers:
                    original_value = row.get(header, "")
                    anonymized_value = anonymize_value(original_value)
                    anonymized_row[header] = anonymized_value
                    
                    if original_value.strip():  # Count non-empty values
                        total_values_processed += 1
                
                anonymized_rows.append(anonymized_row)
                
                # Show progress for large files
                if row_num % 1000 == 0:
                    print(f"  Processed {row_num} rows...")
            
            print(f"  Processed {row_num} total rows")
        
        # Write the anonymized CSV
        with open(OUTPUT_FILE, 'w', encoding='utf-8', newline='') as outfile:
            writer = csv.DictWriter(outfile, fieldnames=original_headers)
            writer.writeheader()
            writer.writerows(anonymized_rows)
        
        print(f"\nAnonymization completed successfully!")
        print(f"Total values anonymized: {total_values_processed}")
        print(f"Output saved as: {OUTPUT_FILE}")
        
        # Show a preview of the anonymized data
        print(f"\nPreview of anonymized data (first 3 rows):")
        print("Columns:", ", ".join(original_headers))
        
        for i, row in enumerate(anonymized_rows[:3]):
            values = [row.get(col, "") for col in original_headers]
            # Truncate long hashes for display
            display_values = [v[:16] + "..." if len(v) > 16 else v for v in values]
            print(f"Row {i+1}: {display_values}")
            
    except Exception as e:
        print(f"Error processing CSV file: {e}")
        sys.exit(1)


def main():
    """Main function to run the anonymization process."""
    
    print("CSV Data Anonymizer")
    print("=" * 20)
    
    try:
        anonymize_csv()
    except KeyboardInterrupt:
        print("\nOperation cancelled by user.")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()